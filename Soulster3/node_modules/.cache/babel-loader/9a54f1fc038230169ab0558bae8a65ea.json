{"ast":null,"code":"export class TransactionWithSignature {\n  constructor(signature, confirmedTransaction) {\n    this.signature = signature;\n    this.confirmedTransaction = confirmedTransaction;\n  }\n\n}\nexport async function getTransactions(connection, address) {\n  const transSignatures = await connection.getConfirmedSignaturesForAddress2(address);\n  const transactions = new Array();\n\n  for (let i = 0; i < transSignatures.length; i++) {\n    const signature = transSignatures[i].signature;\n    const confirmedTransaction = await connection.getConfirmedTransaction(signature);\n\n    if (confirmedTransaction) {\n      const transWithSignature = new TransactionWithSignature(signature, confirmedTransaction);\n      transactions.push(transWithSignature);\n    }\n  }\n\n  return transactions;\n}\nexport async function divideVars(depositAmount, time) {\n  var ratePerTransaction = depositAmount / time;\n  return ratePerTransaction;\n}","map":{"version":3,"sources":["C:/Users/parv2/Documents/SolStream/Soulster3/src/helpers/transactions.ts"],"names":["TransactionWithSignature","constructor","signature","confirmedTransaction","getTransactions","connection","address","transSignatures","getConfirmedSignaturesForAddress2","transactions","Array","i","length","getConfirmedTransaction","transWithSignature","push","divideVars","depositAmount","time","ratePerTransaction"],"mappings":"AAEA,OAAO,MAAMA,wBAAN,CAA+B;AACpCC,EAAAA,WAAW,CACFC,SADE,EAEFC,oBAFE,EAGT;AAAA,SAFOD,SAEP,GAFOA,SAEP;AAAA,SADOC,oBACP,GADOA,oBACP;AAAE;;AAJgC;AAOtC,OAAO,eAAeC,eAAf,CACLC,UADK,EAELC,OAFK,EAGqC;AAC1C,QAAMC,eAAe,GAAG,MAAMF,UAAU,CAACG,iCAAX,CAC5BF,OAD4B,CAA9B;AAIA,QAAMG,YAAY,GAAG,IAAIC,KAAJ,EAArB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,eAAe,CAACK,MAApC,EAA4CD,CAAC,EAA7C,EAAiD;AAC/C,UAAMT,SAAS,GAAGK,eAAe,CAACI,CAAD,CAAf,CAAmBT,SAArC;AACA,UAAMC,oBAAoB,GAAG,MAAME,UAAU,CAACQ,uBAAX,CACjCX,SADiC,CAAnC;;AAGA,QAAIC,oBAAJ,EAA0B;AACxB,YAAMW,kBAAkB,GAAG,IAAId,wBAAJ,CACzBE,SADyB,EAEzBC,oBAFyB,CAA3B;AAIAM,MAAAA,YAAY,CAACM,IAAb,CAAkBD,kBAAlB;AACD;AACF;;AACD,SAAOL,YAAP;AACD;AAGD,OAAO,eAAeO,UAAf,CACLC,aADK,EAELC,IAFK,EAGY;AACjB,MAAIC,kBAAkB,GAAGF,aAAa,GAACC,IAAvC;AACA,SAAOC,kBAAP;AACD","sourcesContent":["import { Connection, PublicKey, ConfirmedTransaction  } from \"@solana/web3.js\";\r\n\r\nexport class TransactionWithSignature {\r\n  constructor(\r\n    public signature: string,\r\n    public confirmedTransaction: ConfirmedTransaction\r\n  ) {}\r\n}\r\n\r\nexport async function getTransactions(\r\n  connection: Connection,\r\n  address: PublicKey\r\n): Promise<Array<TransactionWithSignature>> {\r\n  const transSignatures = await connection.getConfirmedSignaturesForAddress2(\r\n    address\r\n  );\r\n\r\n  const transactions = new Array<TransactionWithSignature>();\r\n  for (let i = 0; i < transSignatures.length; i++) {\r\n    const signature = transSignatures[i].signature;\r\n    const confirmedTransaction = await connection.getConfirmedTransaction(\r\n      signature\r\n    );\r\n    if (confirmedTransaction) {\r\n      const transWithSignature = new TransactionWithSignature(\r\n        signature,\r\n        confirmedTransaction\r\n      );\r\n      transactions.push(transWithSignature);\r\n    }\r\n  }\r\n  return transactions;\r\n}\r\n\r\n\r\nexport async function divideVars(\r\n  depositAmount: number,\r\n  time: number\r\n): Promise<Number> {\r\n  var ratePerTransaction = depositAmount/time;\r\n  return ratePerTransaction;\r\n}"]},"metadata":{},"sourceType":"module"}