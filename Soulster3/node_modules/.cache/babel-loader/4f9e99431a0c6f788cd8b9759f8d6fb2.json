{"ast":null,"code":"// @ts-ignore\nimport Wallet from \"@project-serum/sol-wallet-adapter\";\nimport { Connection, SystemProgram, Transaction, PublicKey } from \"@solana/web3.js\";\nexport var receiverUpdatedBalance;\nexport var arr = new Array(0);\nconst cluster = \"https://api.devnet.solana.com \";\nconst connection = new Connection(cluster, \"confirmed\");\nconst wallet = new Wallet(\"https://www.sollet.io\", cluster);\nexport async function initWallet() {\n  var _wallet$publicKey;\n\n  await wallet.connect();\n  console.log(\"wallet publicKey\", wallet === null || wallet === void 0 ? void 0 : (_wallet$publicKey = wallet.publicKey) === null || _wallet$publicKey === void 0 ? void 0 : _wallet$publicKey.toBase58());\n  return [connection, wallet];\n}\nexport async function sendMoney(destPubkeyStr, lamports = 500 * 1000000) {\n  try {\n    console.log(\"starting sendMoney\");\n    const destPubkey = new PublicKey(destPubkeyStr);\n    const walletAccountInfo = await connection.getAccountInfo(wallet.publicKey);\n    console.log(\"wallet data size\", walletAccountInfo === null || walletAccountInfo === void 0 ? void 0 : walletAccountInfo.data.length);\n    const receiverAccountInfo = await connection.getAccountInfo(destPubkey);\n    console.log(\"receiver data size\", receiverAccountInfo === null || receiverAccountInfo === void 0 ? void 0 : receiverAccountInfo.data.length);\n    const receiverInitialBalance = await connection.getBalance(destPubkey);\n    console.log(\"receiver starting balance: \", receiverInitialBalance);\n    arr.push(receiverInitialBalance);\n    console.log(arr);\n    const instruction = SystemProgram.transfer({\n      fromPubkey: wallet.publicKey,\n      toPubkey: destPubkey,\n      lamports // about half a SOL\n\n    });\n    let trans = await setWalletTransaction(instruction);\n    let signature = await signAndSendTransaction(wallet, trans);\n    let result = await connection.confirmTransaction(signature, \"singleGossip\");\n    console.log(\"money sent\", result);\n    receiverUpdatedBalance = await connection.getBalance(destPubkey);\n    console.log(\"receiver Updated balance: \", receiverUpdatedBalance);\n  } catch (e) {\n    console.warn(\"Failed\", e);\n  }\n}\nexport async function setWalletTransaction(instruction) {\n  const transaction = new Transaction();\n  transaction.add(instruction);\n  transaction.feePayer = wallet.publicKey;\n  let hash = await connection.getRecentBlockhash();\n  console.log(\"blockhash\", hash);\n  transaction.recentBlockhash = hash.blockhash;\n  return transaction;\n}\nexport async function signAndSendTransaction(wallet, transaction) {\n  let signedTrans = await wallet.signTransaction(transaction);\n  console.log(\"sign transaction\");\n  let signature = await connection.sendRawTransaction(signedTrans.serialize());\n  console.log(\"send raw transaction\");\n  return signature;\n} //export async function","map":{"version":3,"sources":["C:/Users/parv2/Documents/SolStream/Soulster3/src/helpers/wallet.ts"],"names":["Wallet","Connection","SystemProgram","Transaction","PublicKey","receiverUpdatedBalance","arr","Array","cluster","connection","wallet","initWallet","connect","console","log","publicKey","toBase58","sendMoney","destPubkeyStr","lamports","destPubkey","walletAccountInfo","getAccountInfo","data","length","receiverAccountInfo","receiverInitialBalance","getBalance","push","instruction","transfer","fromPubkey","toPubkey","trans","setWalletTransaction","signature","signAndSendTransaction","result","confirmTransaction","e","warn","transaction","add","feePayer","hash","getRecentBlockhash","recentBlockhash","blockhash","signedTrans","signTransaction","sendRawTransaction","serialize"],"mappings":"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","sourcesContent":["// @ts-ignore\r\n\r\n\r\nimport Wallet from \"@project-serum/sol-wallet-adapter\";\r\nimport {\r\n  Connection,\r\n  SystemProgram,\r\n  Transaction,\r\n  PublicKey,\r\n  TransactionInstruction,\r\n} from \"@solana/web3.js\";\r\nimport EventEmitter from \"eventemitter3\";\r\n\r\nexport var receiverUpdatedBalance: number;\r\nexport var arr = new Array(0);\r\nexport interface WalletAdapter extends EventEmitter {\r\n  publicKey: PublicKey | null;\r\n  signTransaction: (transaction: Transaction) => Promise<Transaction>;\r\n  connect: () => any;\r\n  disconnect: () => any;\r\n}\r\n\r\nconst cluster = \"https://api.devnet.solana.com \";\r\nconst connection = new Connection(cluster, \"confirmed\");\r\nconst wallet: WalletAdapter = new Wallet(\"https://www.sollet.io\", cluster);\r\n\r\nexport async function initWallet(): Promise<[Connection, WalletAdapter]> {\r\n  await wallet.connect();\r\n  console.log(\"wallet publicKey\", wallet?.publicKey?.toBase58());\r\n  return [connection, wallet];\r\n}\r\n\r\nexport async function sendMoney(\r\n  destPubkeyStr: string,\r\n  lamports: number = 500 * 1000000\r\n) {\r\n  try {\r\n    console.log(\"starting sendMoney\");\r\n    const destPubkey = new PublicKey(destPubkeyStr);\r\n    const walletAccountInfo = await connection.getAccountInfo(\r\n      wallet!.publicKey!\r\n    );\r\n    console.log(\"wallet data size\", walletAccountInfo?.data.length);\r\n\r\n    const receiverAccountInfo = await connection.getAccountInfo(destPubkey);\r\n    console.log(\"receiver data size\", receiverAccountInfo?.data.length);\r\n\r\n    const receiverInitialBalance = await connection.getBalance(destPubkey);\r\n    console.log(\"receiver starting balance: \", receiverInitialBalance);\r\n    arr.push(receiverInitialBalance);\r\n    console.log(arr);\r\n\r\n    const instruction = SystemProgram.transfer({\r\n      fromPubkey: wallet!.publicKey!,\r\n      toPubkey: destPubkey,\r\n      lamports, // about half a SOL\r\n    });\r\n    let trans = await setWalletTransaction(instruction);\r\n\r\n    let signature = await signAndSendTransaction(wallet, trans);\r\n    let result = await connection.confirmTransaction(signature, \"singleGossip\");\r\n    console.log(\"money sent\", result);\r\n\r\n    receiverUpdatedBalance = await connection.getBalance(destPubkey);\r\n    console.log(\"receiver Updated balance: \", receiverUpdatedBalance);\r\n  } catch (e) {\r\n    console.warn(\"Failed\", e);\r\n  }\r\n}\r\n\r\nexport async function setWalletTransaction(\r\n  instruction: TransactionInstruction\r\n): Promise<Transaction> {\r\n  const transaction = new Transaction();\r\n  transaction.add(instruction);\r\n  transaction.feePayer = wallet!.publicKey!;\r\n  let hash = await connection.getRecentBlockhash();\r\n  console.log(\"blockhash\", hash);\r\n  transaction.recentBlockhash = hash.blockhash;\r\n  return transaction;\r\n}\r\n\r\nexport async function signAndSendTransaction(\r\n  wallet: WalletAdapter,\r\n  transaction: Transaction\r\n): Promise<string> {\r\n  let signedTrans = await wallet.signTransaction(transaction);\r\n  console.log(\"sign transaction\");\r\n  let signature = await connection.sendRawTransaction(signedTrans.serialize());\r\n  console.log(\"send raw transaction\");\r\n  return signature;\r\n}\r\n\r\n//export async function \r\n"]},"metadata":{},"sourceType":"module"}